apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: app
    name: app
  spec:
    ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
    selector:
      io.kompose.service: app
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mongodb
    name: mongodb
  spec:
    ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
    selector:
      io.kompose.service: mongodb
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: app
    name: app
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: app
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/back-end-network: "true"
          io.kompose.service: app
      spec:
        containers:
        - env:
          - name: DATABASE_NAME
            value: mongodb
          - name: WAIT_BEFORE_HOSTS
            value: "5000"
          - name: WAIT_HOSTS
            value: mongodb:27017
          image: app
          imagePullPolicy: ""
          name: node-app-container
          ports:
          - containerPort: 8000
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: back-end-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/back-end-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/back-end-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mongodb
    name: mongodb
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mongodb
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/back-end-network: "true"
          io.kompose.service: mongodb
      spec:
        containers:
        - args:
          - mongod
          - --noauth
          image: mongo
          imagePullPolicy: ""
          name: mongodb
          ports:
          - containerPort: 27017
          resources: {}
          volumeMounts:
          - mountPath: /data/database
            name: appDB
        hostname: mongodb
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: appDB
          persistentVolumeClaim:
            claimName: appDB
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: appDB
    name: appDB
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: back-end-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/back-end-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/back-end-network: "true"
kind: List
metadata: {}

